{"version":3,"sources":["models/enums/direction.ts","components/forecast/temperature-unit/index.tsx","models/enums/request-status.ts","components/common/navigation-button/index.tsx","components/forecast/weather-card/index.tsx","components/forecast/weather-list/index.tsx","components/forecast/carousel/index.tsx","pages/Forecast/types/forecast-state-model.ts","components/common/loader/index.tsx","pages/Forecast/index.tsx","pages/Forecast/selectors/index.ts","config/index.ts","pages/Forecast/forecast-routes.ts","pages/Forecast/slices/initial-state.ts","pages/Forecast/slices/forecast-slice.ts","pages/Forecast/containers/forecasts-container.ts","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["Direction","TemperatureUnit","unit","unitChange","FormControl","component","RadioGroup","row","name","value","onChange","event","target","FormControlLabel","control","Radio","label","RequestStatus","useStyles","makeStyles","root","marginRight","marginLeft","NavigationButton","direction","disabled","onButtonClick","classes","Fab","color","className","onClick","left","ArrowBackIos","right","ArrowForwardIos","minWidth","maxWidth","card","textAlign","cursor","WeatherCard","cardData","onCardClick","Card","date","CardContent","Typography","averageTemperature","format","Date","display","flexDirection","WeatherList","weatherList","map","weatherCardData","index","alignItems","justifyContent","Carousel","onCarouselButtonClick","leftButtonDisabled","rightButtonDisabled","height","Loader","CircularProgress","paddingTop","toolbar","marginBottom","chart","margin","marginTop","ForecastsDashboard","selectedCardData","selectWeatherCard","carouselLeftArrowDisabled","carouselRightArrowDisabled","temperatureUnit","temperatureUnitChange","carouselRightArrowClicked","carouselLeftArrowClicked","fetchForecasts","forecastsRequestStatus","fetchForecastAction","useEffect","handleCarouselButtonClick","ForecastsUI","Button","variant","ResponsiveContainer","width","BarChart","data","XAxis","dataKey","YAxis","Tooltip","Bar","fill","FailureMessage","Snackbar","open","autoHideDuration","elevation","severity","Loading","Success","Failure","convertKelvinToCelsius","temperature","Math","floor","convertKelvinToFahrenheit","forecastState","state","forecast","forecastDataByDay","createSelector","carouselCursor","pageSize","loadForecastsRequestStatus","selectedForecastCardDate","Object","keys","length","carouselCardData","carouselData","entries","forEach","forecasts","reduce","accumulatedTemperature","current","main","temp","push","celsius","slice","dt_txt","process","REACT_APP_OPEN_WEATHER_BASE_URL","REACT_APP_OPEN_WEATHER_API_KEY","API_BASE_URL","API_KEY","getForecastRoute","cityName","initialState","Idle","REDUCER_NAME","createAsyncThunk","a","route","fetch","then","response","json","list","forecastSlice","createSlice","reducers","incrementCursor","decrementCursor","action","payload","extraReducers","pending","fulfilled","forecastsDataByDay","forecastDate","split","groupForecastsByDay","rejected","actions","connect","dispatch","bindActionCreators","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73154174.chunk.js","sourcesContent":["export enum Direction {\n\n  left = 'left',\n\n  right = 'right'\n\n}\n","import { FC } from \"react\";\nimport { FormControl, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { TemperatureUnit as TemperatureUnitEnum } from \"../../../pages/Forecast/types/forecast-state-model\";\n\ninterface TemperatureUnitProps {\n\n  unit: TemperatureUnitEnum;\n\n  unitChange: (unit: TemperatureUnitEnum) => void;\n\n}\n\nconst TemperatureUnit: FC<TemperatureUnitProps> = ({ unit, unitChange }) => {\n  const handleChange = (event) => {\n    unitChange(event.target.value as TemperatureUnitEnum);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup row aria-label=\"temperature-unit\" name=\"unit\" value={ unit } onChange={ handleChange }>\n        <FormControlLabel value=\"celsius\" control={<Radio />} label=\"Celsius\" />\n        <FormControlLabel value=\"fahrenheit\" control={<Radio />} label=\"Fahrenheit\" />\n      </RadioGroup>\n    </FormControl>\n  )\n};\n\nexport default TemperatureUnit;\n","export enum RequestStatus {\n\n    Idle,\n\n    Loading,\n\n    Success,\n\n    Failure\n\n}\n","import { FC } from \"react\";\nimport { Fab, makeStyles } from \"@material-ui/core\";\nimport { Direction } from \"../../../models/enums/direction\";\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\n\ninterface NavigationButtonProps {\n\n  direction: Direction;\n\n  disabled: boolean;\n\n  onButtonClick: (direction: Direction) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    marginRight: 20,\n    marginLeft: 20,\n  }\n});\n\nconst NavigationButton: FC<NavigationButtonProps> = ({ direction, disabled, onButtonClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Fab\n      color=\"primary\"\n      disabled={ disabled }\n      className={ classes.root }\n      aria-label={ direction }\n      onClick={ () => onButtonClick(direction) } >\n      { direction === Direction.left && <ArrowBackIos /> }\n      { direction === Direction.right && <ArrowForwardIos /> }\n    </Fab>\n  )\n};\n\nexport default NavigationButton;\n","import { FC } from \"react\";\nimport { Card, CardContent, makeStyles, Typography } from \"@material-ui/core\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\nimport { format } from 'date-fns';\n\ninterface WeatherCardProps {\n\n  cardData: CarouselCardData;\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    marginRight: 10,\n    marginLeft: 10,\n    minWidth: 200,\n    maxWidth: 200\n  },\n  card: {\n    textAlign: 'center',\n    \"&:hover, &:focus\": {\n      cursor: 'pointer'\n    }\n  }\n});\n\nconst WeatherCard: FC<WeatherCardProps> = ({ cardData , onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Card\n      onClick={ () => onCardClick(cardData.date) }\n      className={ classes.root }>\n      <CardContent className={ classes.card }>\n        <Typography>Temperature</Typography>\n        <Typography>\n          <strong>{ cardData.averageTemperature }</strong>\n        </Typography>\n        <Typography>{ format(new Date(cardData.date), 'dd MMM. yyyy') }</Typography>\n      </CardContent>\n    </Card>\n  )\n};\n\nexport default WeatherCard;\n","import { FC } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\nimport WeatherCard from \"../weather-card\";\n\ninterface WeatherListProps {\n\n  weatherList: CarouselCardData[];\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n});\n\nconst WeatherList: FC<WeatherListProps> = ({ weatherList, onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={ classes.root }>\n      { weatherList?.map((weatherCardData: CarouselCardData, index: number) => <WeatherCard key={ index } cardData={ weatherCardData } onCardClick={ (date: string) => onCardClick(date) } />) }\n    </div>\n  );\n};\n\nexport default WeatherList;\n","import { FC } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport NavigationButton from \"../../common/navigation-button\";\nimport { Direction } from \"../../../models/enums/direction\";\nimport WeatherList from \"../weather-list\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\n\ninterface CarouselProps {\n\n  weatherList: CarouselCardData[];\n\n  onCarouselButtonClick: (direction: Direction) => void;\n\n  leftButtonDisabled: boolean;\n\n  rightButtonDisabled: boolean;\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nconst Carousel: FC<CarouselProps> = ({ weatherList, onCarouselButtonClick, leftButtonDisabled, rightButtonDisabled , onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n\n    <div className={ classes.root }>\n      <NavigationButton direction={ Direction.left } disabled={ leftButtonDisabled } onButtonClick={ onCarouselButtonClick } />\n\n      <WeatherList weatherList={ weatherList } onCardClick={ onCardClick } />\n\n      <NavigationButton direction={ Direction.right } disabled={ rightButtonDisabled } onButtonClick={ onCarouselButtonClick } />\n    </div>\n  )\n};\n\nexport default Carousel;\n","import { RequestStatus } from \"../../../models/enums/request-status\";\nimport { Forecast } from \"./forecast\";\nimport { CarouselCardData } from \"./CarouselCardData\";\n\nexport enum TemperatureUnit {\n\n  celsius = 'celsius',\n\n  fahrenheit = 'fahrenheit'\n\n}\n\nexport interface ForecastStateModel {\n\n  pageSize: number;\n\n  carouselCursor: number;\n\n  selectedForecastCardDate: string;\n\n  temperatureUnit: TemperatureUnit;\n\n  forecastDataByDay: ForecastsDataByDay;\n\n  loadForecastsRequestStatus: RequestStatus;\n\n}\n\nexport interface ForecastCardData {\n  [ date: string ]: CarouselCardData;\n}\n\nexport interface ForecastsDataByDay {\n  [ date: string ]: Forecast[];\n}\n","import { FC } from \"react\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    height: '100vh',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst Loader: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={ classes.root }>\n      <CircularProgress />\n    </div>\n  )\n};\n\nexport default Loader;\n","import { FC, useEffect } from \"react\";\nimport TemperatureUnit from \"../../components/forecast/temperature-unit\";\nimport { TemperatureUnit as TemperatureUnitEnum } from \"./types/forecast-state-model\";\nimport { Button, makeStyles, Snackbar, Typography } from \"@material-ui/core\";\nimport { Direction } from \"../../models/enums/direction\";\nimport Carousel from \"../../components/forecast/carousel\";\nimport { RequestStatus } from \"../../models/enums/request-status\";\nimport { Bar, BarChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport Loader from \"../../components/common/loader\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { CarouselCardData } from \"./types/CarouselCardData\";\n\ninterface ForecastsDashboardProps {\n  weatherList: CarouselCardData[];\n  temperatureUnit: TemperatureUnitEnum;\n  forecastsRequestStatus: RequestStatus;\n  carouselLeftArrowDisabled: boolean;\n  carouselRightArrowDisabled: boolean;\n  selectedCardData: any;\n  fetchForecasts: any;\n  selectWeatherCard: (date: string) => void;\n  fetchForecastAction: () => void;\n  temperatureUnitChange: (unit: TemperatureUnitEnum) => void;\n  carouselRightArrowClicked: () => void;\n  carouselLeftArrowClicked: () => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    paddingTop: 150\n  },\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'center',\n    marginBottom: 35\n  },\n  chart: {\n    margin: '0 auto',\n    marginTop: 50\n  },\n  unit: {\n    textAlign: 'center'\n  }\n});\n\nconst ForecastsDashboard: FC<ForecastsDashboardProps> = ({\n  weatherList,\n  selectedCardData,\n  selectWeatherCard,\n  carouselLeftArrowDisabled,\n  carouselRightArrowDisabled,\n  temperatureUnit,\n  temperatureUnitChange,\n  carouselRightArrowClicked,\n  carouselLeftArrowClicked,\n  fetchForecasts,\n  forecastsRequestStatus,\n  fetchForecastAction\n}) => {\n\n  useEffect(() => {\n    fetchForecastAction();\n  }, [ fetchForecastAction ]);\n\n  const classes = useStyles();\n\n  const handleCarouselButtonClick = (direction: Direction) => {\n    direction === Direction.right ? carouselRightArrowClicked() : carouselLeftArrowClicked();\n  };\n\n  const ForecastsUI: FC = () => {\n    return (\n      <div className={ classes.root }>\n\n        <div className={ classes.toolbar }>\n          <TemperatureUnit unit={ temperatureUnit } unitChange={ temperatureUnitChange }/>\n          <Button variant=\"contained\" onClick={ fetchForecasts }>Refresh</Button>\n        </div>\n\n        <Carousel\n          onCardClick={ (date: string) => selectWeatherCard(date) }\n          rightButtonDisabled={ carouselRightArrowDisabled }\n          leftButtonDisabled={ carouselLeftArrowDisabled }\n          weatherList={ weatherList }\n          onCarouselButtonClick={ handleCarouselButtonClick } />\n\n        <ResponsiveContainer width={ 800 } height={ 500 } className={ classes.chart }>\n          <BarChart data={ selectedCardData }>\n            <XAxis dataKey=\"dt_txt\" />\n            <YAxis />\n            <Tooltip />\n            <Bar dataKey=\"main.temp\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n\n        <Typography className={ classes.unit }>{ temperatureUnit }</Typography>\n\n      </div>\n    );\n  }\n\n  const FailureMessage: FC = () => {\n    return (\n      <Snackbar open={ true } autoHideDuration={6000}>\n        <MuiAlert elevation={6} variant=\"filled\" severity={ 'error' }>\n          An error occurred while fetching data!\n        </MuiAlert>\n      </Snackbar>\n    );\n  }\n\n  return (\n    <>\n      { forecastsRequestStatus === RequestStatus.Loading && <Loader /> }\n      { forecastsRequestStatus === RequestStatus.Success && <ForecastsUI /> }\n      { forecastsRequestStatus === RequestStatus.Failure && <FailureMessage /> }\n    </>\n  )\n};\n\nexport default ForecastsDashboard;\n","import { createSelector } from \"reselect\";\nimport { State } from 'store/types';\nimport { ForecastsDataByDay, ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\nimport { CarouselCardData } from \"../types/CarouselCardData\";\nimport { Forecast } from \"../types/forecast\";\nimport { format } from \"date-fns\";\n\nconst convertKelvinToCelsius = (temperature: number): number => {\n    return Math.floor(temperature - 273.15)\n}\n\nconst convertKelvinToFahrenheit = (temperature: number): number => {\n    return Math.floor(convertKelvinToCelsius(temperature) * (9 / 5) + 32);\n}\n\nexport const forecastState = (state: State) => state.forecast;\n\nexport const forecastDataByDay = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.forecastDataByDay);\n\nexport const carouselCursor = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.carouselCursor);\n\nexport const pageSize = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.pageSize);\n\nexport const temperatureUnit = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.temperatureUnit);\n\nexport const loadForecastsRequestStatus = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.loadForecastsRequestStatus);\n\nexport const carouselLeftArrowDisabled = createSelector([ carouselCursor ], (cursor: number) => (cursor <= 0));\n\nexport const selectedForecastCardDate = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.selectedForecastCardDate);\n\nexport const carouselRightArrowDisabled = createSelector([ carouselCursor, pageSize, forecastDataByDay ], (cursor: number, pageSize: number, forecastDataByDay: ForecastsDataByDay) =>\n  (cursor + pageSize) === Object.keys(forecastDataByDay).length);\n\n// for carousel\nexport const carouselCardData = createSelector(\n  [ forecastDataByDay, carouselCursor, pageSize, temperatureUnit ], (forecastDataByDay: ForecastsDataByDay, cursor: number, pageSize: number, temperatureUnit: TemperatureUnit) => {\n      const carouselData: CarouselCardData[] = [];\n      Object.entries(forecastDataByDay).forEach((data) => {\n          const forecasts = data[1];\n          const accumulatedTemperature = forecasts.reduce((accumulatedTemperature: number, current: Forecast) => accumulatedTemperature + current.main.temp, 0)\n          const averageTemperature = accumulatedTemperature / forecasts.length;\n\n          carouselData.push({date: data[0], averageTemperature: temperatureUnit === TemperatureUnit.celsius ? `${ convertKelvinToCelsius(averageTemperature) }C` : `${ convertKelvinToFahrenheit(averageTemperature) }F` });\n      });\n\n      return carouselData.slice(cursor, cursor + pageSize);\n});\n\n// for bar chart\nexport const selectedCardData = createSelector([ forecastDataByDay, selectedForecastCardDate, temperatureUnit ], (forecastDataByDay: ForecastsDataByDay, selectedForecastCardDate: string, unit: TemperatureUnit) => {\n    return forecastDataByDay[selectedForecastCardDate]?.map((forecast: Forecast) => ({\n        ...forecast,\n        main: {\n            ...forecast.main,\n            temp: unit === TemperatureUnit.celsius ? convertKelvinToCelsius(forecast.main.temp) : convertKelvinToFahrenheit(forecast.main.temp)\n        },\n        dt_txt: format(new Date(forecast.dt_txt), 'p')\n    }));\n});\n","const { REACT_APP_OPEN_WEATHER_BASE_URL, REACT_APP_OPEN_WEATHER_API_KEY } = process.env;\n\nexport const API_BASE_URL = REACT_APP_OPEN_WEATHER_BASE_URL;\nexport const API_KEY = REACT_APP_OPEN_WEATHER_API_KEY;","import { API_BASE_URL, API_KEY } from 'config';\n\nexport const getForecastRoute = (cityName: string = 'München,DE') => {\n  return `${API_BASE_URL}?q=${cityName}&appid=${API_KEY}`;\n}\n","import { RequestStatus } from \"../../../models/enums/request-status\";\nimport { ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\n\nexport const initialState: ForecastStateModel = {\n\n  pageSize: 3,\n\n  carouselCursor: 0,\n\n  selectedForecastCardDate: '',\n\n  forecastDataByDay: {},\n\n  temperatureUnit: TemperatureUnit.celsius,\n\n  loadForecastsRequestStatus: RequestStatus.Idle,\n\n};\n","import { createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { RequestStatus } from 'models/enums/request-status';\nimport { getForecastRoute } from '../forecast-routes';\nimport { initialState } from './initial-state';\nimport { ForecastsDataByDay, ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\nimport { Forecast } from \"../types/forecast\";\n\nconst REDUCER_NAME = 'forecast';\n\nexport const fetchForecastAction: any = createAsyncThunk(\n  `${ REDUCER_NAME }/fetchForecastData`,\n  async () => {\n    const route = getForecastRoute()\n    const response = await fetch(route).then(response => response.json());\n    return response.list\n  }\n);\n\nexport const forecastSlice = createSlice({\n  name: REDUCER_NAME,\n  initialState,\n  reducers: {\n    incrementCursor(state) {\n      state.carouselCursor++\n    },\n    decrementCursor(state) {\n      state.carouselCursor--\n    },\n    temperatureUnitChange(state, action: PayloadAction<TemperatureUnit>) {\n      state.temperatureUnit = action.payload;\n    },\n    selectWeatherCard(state, action: PayloadAction<string>) {\n      state.selectedForecastCardDate = action.payload;\n    }\n  },\n  extraReducers: {\n    [ fetchForecastAction.pending ]: (state: ForecastStateModel) => {\n      state.loadForecastsRequestStatus = RequestStatus.Loading;\n    },\n    [ fetchForecastAction.fulfilled ]: (state: ForecastStateModel, action) => {\n      state.forecastDataByDay = groupForecastsByDay(action.payload);\n      state.selectedForecastCardDate = Object.keys(state.forecastDataByDay)[0];\n      state.loadForecastsRequestStatus = RequestStatus.Success;\n    },\n    [ fetchForecastAction.rejected ]: (state: ForecastStateModel) => {\n      state.loadForecastsRequestStatus = RequestStatus.Failure;\n    },\n  },\n});\n\nexport const { incrementCursor, decrementCursor, temperatureUnitChange, selectWeatherCard } = forecastSlice.actions;\n\nfunction groupForecastsByDay(forecasts: Forecast[]): ForecastsDataByDay {\n  const forecastsDataByDay: ForecastsDataByDay = {};\n\n  forecasts.forEach((forecast: Forecast) => {\n    const forecastDate = forecast.dt_txt.split(' ')[0];\n\n    if (forecastsDataByDay[forecastDate]) {\n      forecastsDataByDay[forecastDate].push(forecast);\n    } else {\n      forecastsDataByDay[forecastDate] = [ forecast ];\n    }\n  });\n\n  return forecastsDataByDay\n}\n","import { connect } from 'react-redux';\nimport ForecastsDashboard from '../';\nimport { State } from 'store/types';\nimport { carouselCardData, loadForecastsRequestStatus, temperatureUnit, carouselRightArrowDisabled, carouselLeftArrowDisabled, selectedCardData } from \"../selectors\";\nimport { bindActionCreators } from \"@reduxjs/toolkit\";\nimport { decrementCursor, fetchForecastAction, incrementCursor, temperatureUnitChange, selectWeatherCard } from \"../slices/forecast-slice\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    weatherList: carouselCardData(state),\n    temperatureUnit: temperatureUnit(state),\n    selectedCardData: selectedCardData(state),\n    forecastsRequestStatus: loadForecastsRequestStatus(state),\n    carouselLeftArrowDisabled: carouselLeftArrowDisabled(state),\n    carouselRightArrowDisabled: carouselRightArrowDisabled(state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators({\n    fetchForecastAction: fetchForecastAction,\n    temperatureUnitChange: temperatureUnitChange,\n    carouselRightArrowClicked: incrementCursor,\n    carouselLeftArrowClicked: decrementCursor,\n    fetchForecasts: fetchForecastAction,\n    selectWeatherCard: selectWeatherCard\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastsDashboard);\n","import React  from 'react';\nimport './App.css';\nimport ForecastsDashboard from \"./pages/Forecast/containers/forecasts-container\";\nimport { Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <Container>\n      <ForecastsDashboard />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { forecastSlice } from 'pages/Forecast/slices/forecast-slice';\n\nexport const store = configureStore({\n    reducer: { forecast: forecastSlice.reducer },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}