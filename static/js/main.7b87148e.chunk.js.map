{"version":3,"sources":["models/enums/request-status.ts","pages/Forecast/types/forecast-state-model.ts","components/common/loader/index.tsx","components/forecast/temperature-unit/index.tsx","components/forecast/toolbar-container/index.tsx","pages/Forecast/selectors/index.ts","config/index.ts","pages/Forecast/forecast-routes.ts","pages/Forecast/slices/initial-state.ts","pages/Forecast/slices/forecast-slice.ts","pages/Forecast/containers/toolbar-container.ts","models/enums/direction.ts","components/common/navigation-button/index.tsx","components/forecast/weather-card/index.tsx","components/forecast/weather-list/index.tsx","components/forecast/carousel/index.tsx","components/forecast/carousal-container/index.tsx","pages/Forecast/containers/carousal-container.ts","components/forecast/barchart-container/index.tsx","pages/Forecast/containers/barchart-container.ts","pages/Forecast/index.tsx","pages/Forecast/containers/forecasts-container.ts","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["RequestStatus","TemperatureUnit","useStyles","makeStyles","root","display","height","justifyContent","alignItems","Loader","classes","className","CircularProgress","unit","unitChange","FormControl","component","RadioGroup","row","name","value","onChange","event","target","FormControlLabel","control","Radio","label","toolbar","marginBottom","ToolBarContainer","temperatureUnit","temperatureUnitChange","fetchForecasts","Button","variant","onClick","convertKelvinToCelsius","temperature","Math","floor","convertKelvinToFahrenheit","forecastState","state","forecast","forecastDataByDay","createSelector","carouselCursor","pageSize","loadForecastsRequestStatus","carouselLeftArrowDisabled","cursor","selectedForecastCardDate","carouselRightArrowDisabled","Object","keys","length","carouselCardData","carouselData","entries","forEach","data","forecasts","averageTemperature","reduce","accumulatedTemperature","current","main","temp","push","date","celsius","slice","selectedCardData","map","dt_txt","format","Date","process","REACT_APP_OPEN_WEATHER_BASE_URL","REACT_APP_OPEN_WEATHER_API_KEY","API_BASE_URL","API_KEY","getForecastRoute","cityName","initialState","Idle","REDUCER_NAME","fetchForecastAction","createAsyncThunk","a","route","fetch","then","response","json","list","forecastSlice","createSlice","reducers","incrementCursor","decrementCursor","action","payload","selectWeatherCard","extraReducers","pending","Loading","fulfilled","forecastsDataByDay","forecastDate","split","groupForecastsByDay","Success","rejected","Failure","actions","Direction","connect","dispatch","bindActionCreators","marginRight","marginLeft","NavigationButton","direction","disabled","onButtonClick","Fab","color","left","ArrowBackIos","right","ArrowForwardIos","minWidth","maxWidth","card","textAlign","WeatherCard","cardData","onCardClick","Card","CardContent","Typography","flexDirection","WeatherList","weatherList","weatherCardData","index","Carousel","onCarouselButtonClick","leftButtonDisabled","rightButtonDisabled","CarousalContainer","carouselRightArrowClicked","carouselLeftArrowClicked","chart","margin","marginTop","BarChartContainer","ResponsiveContainer","width","BarChart","XAxis","dataKey","YAxis","Tooltip","Bar","fill","paddingTop","ForecastsDashboard","forecastsRequestStatus","useEffect","ForecastsUI","FailureMessage","Snackbar","open","autoHideDuration","elevation","severity","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b87148e.chunk.js","sourcesContent":["export enum RequestStatus {\n\n    Idle,\n\n    Loading,\n\n    Success,\n\n    Failure\n\n}\n","import { RequestStatus } from \"../../../models/enums/request-status\";\nimport { Forecast } from \"./forecast\";\nimport { CarouselCardData } from \"./CarouselCardData\";\n\nexport enum TemperatureUnit {\n\n  celsius = 'celsius',\n\n  fahrenheit = 'fahrenheit'\n\n}\n\nexport interface ForecastStateModel {\n\n  pageSize: number;\n\n  carouselCursor: number;\n\n  selectedForecastCardDate: string;\n\n  temperatureUnit: TemperatureUnit;\n\n  forecastDataByDay: ForecastsDataByDay;\n\n  loadForecastsRequestStatus: RequestStatus;\n\n}\n\nexport interface ForecastCardData {\n  [ date: string ]: CarouselCardData;\n}\n\nexport interface ForecastsDataByDay {\n  [ date: string ]: Forecast[];\n}\n","import { FC } from \"react\";\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    height: '100vh',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nconst Loader: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={ classes.root }>\n      <CircularProgress />\n    </div>\n  )\n};\n\nexport default Loader;\n","import { FC } from \"react\";\nimport { FormControl, FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\nimport { TemperatureUnit as TemperatureUnitEnum } from \"../../../pages/Forecast/types/forecast-state-model\";\n\ninterface TemperatureUnitProps {\n\n  unit: TemperatureUnitEnum;\n\n  unitChange: (unit: TemperatureUnitEnum) => void;\n\n}\n\nconst TemperatureUnit: FC<TemperatureUnitProps> = ({ unit, unitChange }) => {\n  const handleChange = (event) => {\n    unitChange(event.target.value as TemperatureUnitEnum);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup row aria-label=\"temperature-unit\" name=\"unit\" value={ unit } onChange={ handleChange }>\n        <FormControlLabel value=\"celsius\" control={<Radio />} label=\"Celsius\" />\n        <FormControlLabel value=\"fahrenheit\" control={<Radio />} label=\"Fahrenheit\" />\n      </RadioGroup>\n    </FormControl>\n  )\n};\n\nexport default TemperatureUnit;\n","import { FC } from \"react\";\nimport TemperatureUnit from \"components/forecast/temperature-unit\";\nimport { TemperatureUnit as TemperatureUnitEnum } from \"pages/Forecast/types/forecast-state-model\";\nimport { Button, makeStyles } from \"@material-ui/core\";\n\ninterface ToolBarContainerProps {\n    temperatureUnit: TemperatureUnitEnum;\n    temperatureUnitChange: (unit: TemperatureUnitEnum) => void;\n    fetchForecasts: any;\n}\n\nconst useStyles = makeStyles({\n    toolbar: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginBottom: 35\n    }\n});\n\nconst ToolBarContainer: FC<ToolBarContainerProps> = ({ temperatureUnit, temperatureUnitChange, fetchForecasts }) => {\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.toolbar}>\n            <TemperatureUnit unit={temperatureUnit} unitChange={temperatureUnitChange} />\n            <Button variant=\"contained\" onClick={fetchForecasts}>Refresh</Button>\n        </div>\n    )\n};\n\nexport default ToolBarContainer;\n","import { createSelector } from \"reselect\";\nimport { State } from 'store/types';\nimport { ForecastsDataByDay, ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\nimport { CarouselCardData } from \"../types/CarouselCardData\";\nimport { Forecast } from \"../types/forecast\";\nimport { format } from \"date-fns\";\n\nconst convertKelvinToCelsius = (temperature: number): number => {\n    return Math.floor(temperature - 273.15)\n}\n\nconst convertKelvinToFahrenheit = (temperature: number): number => {\n    return Math.floor(convertKelvinToCelsius(temperature) * (9 / 5) + 32);\n}\n\nexport const forecastState = (state: State) => state.forecast;\n\nexport const forecastDataByDay = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.forecastDataByDay);\n\nexport const carouselCursor = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.carouselCursor);\n\nexport const pageSize = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.pageSize);\n\nexport const temperatureUnit = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.temperatureUnit);\n\nexport const loadForecastsRequestStatus = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.loadForecastsRequestStatus);\n\nexport const carouselLeftArrowDisabled = createSelector([ carouselCursor ], (cursor: number) => (cursor <= 0));\n\nexport const selectedForecastCardDate = createSelector([ forecastState ], (forecastState: ForecastStateModel) => forecastState.selectedForecastCardDate);\n\nexport const carouselRightArrowDisabled = createSelector([ carouselCursor, pageSize, forecastDataByDay ], (cursor: number, pageSize: number, forecastDataByDay: ForecastsDataByDay) =>\n  (cursor + pageSize) === Object.keys(forecastDataByDay).length);\n\n// for carousel\nexport const carouselCardData = createSelector(\n  [ forecastDataByDay, carouselCursor, pageSize, temperatureUnit ], (forecastDataByDay: ForecastsDataByDay, cursor: number, pageSize: number, temperatureUnit: TemperatureUnit) => {\n      const carouselData: CarouselCardData[] = [];\n      Object.entries(forecastDataByDay).forEach((data) => {\n          const forecasts = data[1];\n          const accumulatedTemperature = forecasts.reduce((accumulatedTemperature: number, current: Forecast) => accumulatedTemperature + current.main.temp, 0)\n          const averageTemperature = accumulatedTemperature / forecasts.length;\n\n          carouselData.push({date: data[0], averageTemperature: temperatureUnit === TemperatureUnit.celsius ? `${ convertKelvinToCelsius(averageTemperature) }C` : `${ convertKelvinToFahrenheit(averageTemperature) }F` });\n      });\n\n      return carouselData.slice(cursor, cursor + pageSize);\n});\n\n// for bar chart\nexport const selectedCardData = createSelector([ forecastDataByDay, selectedForecastCardDate, temperatureUnit ], (forecastDataByDay: ForecastsDataByDay, selectedForecastCardDate: string, unit: TemperatureUnit) => {\n    return forecastDataByDay[selectedForecastCardDate]?.map((forecast: Forecast) => ({\n        ...forecast,\n        main: {\n            ...forecast.main,\n            temp: unit === TemperatureUnit.celsius ? convertKelvinToCelsius(forecast.main.temp) : convertKelvinToFahrenheit(forecast.main.temp)\n        },\n        dt_txt: format(new Date(forecast.dt_txt), 'p')\n    }));\n});\n","const { REACT_APP_OPEN_WEATHER_BASE_URL, REACT_APP_OPEN_WEATHER_API_KEY } = process.env;\n\nexport const API_BASE_URL = REACT_APP_OPEN_WEATHER_BASE_URL;\nexport const API_KEY = REACT_APP_OPEN_WEATHER_API_KEY;","import { API_BASE_URL, API_KEY } from 'config';\n\nexport const getForecastRoute = (cityName: string = 'München,DE') => {\n  return `${API_BASE_URL}?q=${cityName}&appid=${API_KEY}`;\n}\n","import { RequestStatus } from \"../../../models/enums/request-status\";\nimport { ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\n\nexport const initialState: ForecastStateModel = {\n\n  pageSize: 3,\n\n  carouselCursor: 0,\n\n  selectedForecastCardDate: '',\n\n  forecastDataByDay: {},\n\n  temperatureUnit: TemperatureUnit.celsius,\n\n  loadForecastsRequestStatus: RequestStatus.Idle,\n\n};\n","import { createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { RequestStatus } from 'models/enums/request-status';\nimport { getForecastRoute } from '../forecast-routes';\nimport { initialState } from './initial-state';\nimport { ForecastsDataByDay, ForecastStateModel, TemperatureUnit } from \"../types/forecast-state-model\";\nimport { Forecast } from \"../types/forecast\";\n\nconst REDUCER_NAME = 'forecast';\n\nexport const fetchForecastAction: any = createAsyncThunk(\n  `${ REDUCER_NAME }/fetchForecastData`,\n  async () => {\n    const route = getForecastRoute()\n    const response = await fetch(route).then(response => response.json());\n    return response.list\n  }\n);\n\nexport const forecastSlice = createSlice({\n  name: REDUCER_NAME,\n  initialState,\n  reducers: {\n    incrementCursor(state) {\n      state.carouselCursor++\n    },\n    decrementCursor(state) {\n      state.carouselCursor--\n    },\n    temperatureUnitChange(state, action: PayloadAction<TemperatureUnit>) {\n      state.temperatureUnit = action.payload;\n    },\n    selectWeatherCard(state, action: PayloadAction<string>) {\n      state.selectedForecastCardDate = action.payload;\n    }\n  },\n  extraReducers: {\n    [ fetchForecastAction.pending ]: (state: ForecastStateModel) => {\n      state.loadForecastsRequestStatus = RequestStatus.Loading;\n    },\n    [ fetchForecastAction.fulfilled ]: (state: ForecastStateModel, action) => {\n      state.forecastDataByDay = groupForecastsByDay(action.payload);\n      state.selectedForecastCardDate = Object.keys(state.forecastDataByDay)[0];\n      state.loadForecastsRequestStatus = RequestStatus.Success;\n    },\n    [ fetchForecastAction.rejected ]: (state: ForecastStateModel) => {\n      state.loadForecastsRequestStatus = RequestStatus.Failure;\n    },\n  },\n});\n\nexport const { incrementCursor, decrementCursor, temperatureUnitChange, selectWeatherCard } = forecastSlice.actions;\n\nfunction groupForecastsByDay(forecasts: Forecast[]): ForecastsDataByDay {\n  const forecastsDataByDay: ForecastsDataByDay = {};\n\n  forecasts.forEach((forecast: Forecast) => {\n    const forecastDate = forecast.dt_txt.split(' ')[0];\n\n    if (forecastsDataByDay[forecastDate]) {\n      forecastsDataByDay[forecastDate].push(forecast);\n    } else {\n      forecastsDataByDay[forecastDate] = [ forecast ];\n    }\n  });\n\n  return forecastsDataByDay\n}\n","import { connect } from 'react-redux';\nimport ToolBarContainer from 'components/forecast/toolbar-container';\nimport { State } from 'store/types';\nimport { temperatureUnit } from \"../selectors\";\nimport { bindActionCreators } from \"@reduxjs/toolkit\";\nimport { fetchForecastAction, temperatureUnitChange } from \"../slices/forecast-slice\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    temperatureUnit: temperatureUnit(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators({\n    temperatureUnitChange: temperatureUnitChange,\n    fetchForecasts: fetchForecastAction,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolBarContainer);\n","export enum Direction {\n\n  left = 'left',\n\n  right = 'right'\n\n}\n","import { FC } from \"react\";\nimport { Fab, makeStyles } from \"@material-ui/core\";\nimport { Direction } from \"../../../models/enums/direction\";\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\n\ninterface NavigationButtonProps {\n\n  direction: Direction;\n\n  disabled: boolean;\n\n  onButtonClick: (direction: Direction) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    marginRight: 20,\n    marginLeft: 20,\n  }\n});\n\nconst NavigationButton: FC<NavigationButtonProps> = ({ direction, disabled, onButtonClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Fab\n      color=\"primary\"\n      disabled={ disabled }\n      className={ classes.root }\n      aria-label={ direction }\n      onClick={ () => onButtonClick(direction) } >\n      { direction === Direction.left && <ArrowBackIos /> }\n      { direction === Direction.right && <ArrowForwardIos /> }\n    </Fab>\n  )\n};\n\nexport default NavigationButton;\n","import { FC } from \"react\";\nimport { Card, CardContent, makeStyles, Typography } from \"@material-ui/core\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\nimport { format } from 'date-fns';\n\ninterface WeatherCardProps {\n\n  cardData: CarouselCardData;\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    marginRight: 10,\n    marginLeft: 10,\n    minWidth: 200,\n    maxWidth: 200\n  },\n  card: {\n    textAlign: 'center',\n    \"&:hover, &:focus\": {\n      cursor: 'pointer'\n    }\n  }\n});\n\nconst WeatherCard: FC<WeatherCardProps> = ({ cardData , onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Card\n      onClick={ () => onCardClick(cardData.date) }\n      className={ classes.root }>\n      <CardContent className={ classes.card }>\n        <Typography>Temperature</Typography>\n        <Typography>\n          <strong>{ cardData.averageTemperature }</strong>\n        </Typography>\n        <Typography>{ format(new Date(cardData.date), 'dd MMM. yyyy') }</Typography>\n      </CardContent>\n    </Card>\n  )\n};\n\nexport default WeatherCard;\n","import { FC } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\nimport WeatherCard from \"../weather-card\";\n\ninterface WeatherListProps {\n\n  weatherList: CarouselCardData[];\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n  }\n});\n\nconst WeatherList: FC<WeatherListProps> = ({ weatherList, onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={ classes.root }>\n      { weatherList?.map((weatherCardData: CarouselCardData, index: number) => <WeatherCard key={ index } cardData={ weatherCardData } onCardClick={ (date: string) => onCardClick(date) } />) }\n    </div>\n  );\n};\n\nexport default WeatherList;\n","import { FC } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport NavigationButton from \"../../common/navigation-button\";\nimport { Direction } from \"../../../models/enums/direction\";\nimport WeatherList from \"../weather-list\";\nimport { CarouselCardData } from \"../../../pages/Forecast/types/CarouselCardData\";\n\ninterface CarouselProps {\n\n  weatherList: CarouselCardData[];\n\n  onCarouselButtonClick: (direction: Direction) => void;\n\n  leftButtonDisabled: boolean;\n\n  rightButtonDisabled: boolean;\n\n  onCardClick: (date: string) => void;\n\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nconst Carousel: FC<CarouselProps> = ({ weatherList, onCarouselButtonClick, leftButtonDisabled, rightButtonDisabled , onCardClick }) => {\n  const classes = useStyles();\n\n  return (\n\n    <div className={ classes.root }>\n      <NavigationButton direction={ Direction.left } disabled={ leftButtonDisabled } onButtonClick={ onCarouselButtonClick } />\n\n      <WeatherList weatherList={ weatherList } onCardClick={ onCardClick } />\n\n      <NavigationButton direction={ Direction.right } disabled={ rightButtonDisabled } onButtonClick={ onCarouselButtonClick } />\n    </div>\n  )\n};\n\nexport default Carousel;\n","import { FC } from \"react\";\nimport Carousel from \"components/forecast/carousel\";\nimport { CarouselCardData } from \"pages/Forecast/types/CarouselCardData\";\nimport { Direction } from \"models/enums/direction\";\n\ninterface CarousalContainerProps {\n    selectWeatherCard: (date: string) => void;\n    carouselLeftArrowDisabled: boolean;\n    carouselRightArrowDisabled: boolean;\n    weatherList: CarouselCardData[];\n    carouselRightArrowClicked: () => void;\n    carouselLeftArrowClicked: () => void;\n}\n\nconst CarousalContainer: FC<CarousalContainerProps> = ({\n    selectWeatherCard,\n    carouselLeftArrowDisabled,\n    carouselRightArrowDisabled,\n    weatherList,\n    carouselRightArrowClicked,\n    carouselLeftArrowClicked\n}) => {\n\n    const handleCarouselButtonClick = (direction: Direction) => {\n        direction === Direction.right ? carouselRightArrowClicked() : carouselLeftArrowClicked();\n    };\n\n    return (\n        <Carousel\n            onCardClick={(date: string) => selectWeatherCard(date)}\n            rightButtonDisabled={carouselRightArrowDisabled}\n            leftButtonDisabled={carouselLeftArrowDisabled}\n            weatherList={weatherList}\n            onCarouselButtonClick={handleCarouselButtonClick}\n        />\n    )\n};\n\nexport default CarousalContainer;\n","import { connect } from 'react-redux';\nimport CarousalContainer from 'components/forecast/carousal-container';\nimport { State } from 'store/types';\nimport { carouselCardData, carouselRightArrowDisabled, carouselLeftArrowDisabled } from \"../selectors\";\nimport { bindActionCreators } from \"@reduxjs/toolkit\";\nimport { decrementCursor, incrementCursor, selectWeatherCard } from \"../slices/forecast-slice\";\n\nconst mapStateToProps = (state: State) => {\n    return {\n        weatherList: carouselCardData(state),\n        carouselLeftArrowDisabled: carouselLeftArrowDisabled(state),\n        carouselRightArrowDisabled: carouselRightArrowDisabled(state)\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n        carouselRightArrowClicked: incrementCursor,\n        carouselLeftArrowClicked: decrementCursor,\n        selectWeatherCard: selectWeatherCard\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarousalContainer);\n","import { FC } from \"react\";\nimport { Bar, BarChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport { TemperatureUnit as TemperatureUnitEnum } from \"pages/Forecast/types/forecast-state-model\";\n\ninterface BarChartContainerProps {\n    selectedCardData: any;\n    temperatureUnit: TemperatureUnitEnum;\n}\n\nconst useStyles = makeStyles({\n    chart: {\n        margin: '0 auto',\n        marginTop: 50\n    },\n    unit: {\n        textAlign: 'center'\n    }\n});\n\n\nconst BarChartContainer: FC<BarChartContainerProps> = ({\n    selectedCardData,\n    temperatureUnit\n}) => {\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <ResponsiveContainer width={800} height={500} className={classes.chart}>\n                <BarChart data={selectedCardData}>\n                    <XAxis dataKey=\"dt_txt\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"main.temp\" fill=\"#8884d8\" />\n                </BarChart>\n            </ResponsiveContainer>\n            <Typography className={classes.unit}>{temperatureUnit}</Typography>\n        </>\n    )\n};\n\nexport default BarChartContainer;\n","import { connect } from 'react-redux';\nimport BarChartContainer from 'components/forecast/barchart-container';\nimport { State } from 'store/types';\nimport { temperatureUnit, selectedCardData } from \"../selectors\";\nimport { bindActionCreators } from \"@reduxjs/toolkit\";\n\nconst mapStateToProps = (state: State) => {\n    return {\n        temperatureUnit: temperatureUnit(state),\n        selectedCardData: selectedCardData(state),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BarChartContainer);\n","import { FC, useEffect } from \"react\";\nimport { makeStyles, Snackbar } from \"@material-ui/core\";\nimport { RequestStatus } from \"../../models/enums/request-status\";\nimport Loader from \"../../components/common/loader\";\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ToolBarContainer from './containers/toolbar-container';\nimport CarousalContainer from './containers/carousal-container';\nimport BarChartContainer from './containers/barchart-container';\ninterface ForecastsDashboardProps {\n  forecastsRequestStatus: RequestStatus;\n  fetchForecastAction: () => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    paddingTop: 150\n  }\n});\n\nconst ForecastsDashboard: FC<ForecastsDashboardProps> = ({\n  forecastsRequestStatus,\n  fetchForecastAction\n}) => {\n\n  useEffect(() => {\n    fetchForecastAction();\n  }, [fetchForecastAction]);\n\n  const classes = useStyles();\n\n  const ForecastsUI: FC = () => {\n    return (\n      <div className={classes.root}>\n        <ToolBarContainer />\n        <CarousalContainer />\n        <BarChartContainer />\n      </div>\n    );\n  }\n\n  const FailureMessage: FC = () => {\n    return (\n      <Snackbar open={true} autoHideDuration={6000}>\n        <MuiAlert elevation={6} variant=\"filled\" severity={'error'}>\n          An error occurred while fetching data!\n        </MuiAlert>\n      </Snackbar>\n    );\n  }\n\n  return (\n    <>\n      { forecastsRequestStatus === RequestStatus.Loading && <Loader />}\n      { forecastsRequestStatus === RequestStatus.Success && <ForecastsUI />}\n      { forecastsRequestStatus === RequestStatus.Failure && <FailureMessage />}\n    </>\n  )\n};\n\nexport default ForecastsDashboard;\n","import { connect } from 'react-redux';\nimport ForecastsDashboard from '../';\nimport { State } from 'store/types';\nimport { loadForecastsRequestStatus } from \"../selectors\";\nimport { bindActionCreators } from \"@reduxjs/toolkit\";\nimport { fetchForecastAction } from \"../slices/forecast-slice\";\n\nconst mapStateToProps = (state: State) => {\n  return {\n    forecastsRequestStatus: loadForecastsRequestStatus(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return bindActionCreators({\n    fetchForecastAction: fetchForecastAction,\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastsDashboard);\n","import React  from 'react';\nimport './App.css';\nimport ForecastsDashboard from \"./pages/Forecast/containers/forecasts-container\";\nimport { Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <Container>\n      <ForecastsDashboard />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { forecastSlice } from 'pages/Forecast/slices/forecast-slice';\n\nexport const store = configureStore({\n    reducer: { forecast: forecastSlice.reducer },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}